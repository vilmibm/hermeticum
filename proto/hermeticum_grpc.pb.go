// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/hermeticum.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameWorld_ClientInput_FullMethodName = "/proto.GameWorld/ClientInput"
	GameWorld_Ping_FullMethodName        = "/proto.GameWorld/Ping"
)

// GameWorldClient is the client API for GameWorld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameWorldClient interface {
	ClientInput(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Command, WorldEvent], error)
	Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*Pong, error)
}

type gameWorldClient struct {
	cc grpc.ClientConnInterface
}

func NewGameWorldClient(cc grpc.ClientConnInterface) GameWorldClient {
	return &gameWorldClient{cc}
}

func (c *gameWorldClient) ClientInput(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Command, WorldEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameWorld_ServiceDesc.Streams[0], GameWorld_ClientInput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Command, WorldEvent]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameWorld_ClientInputClient = grpc.BidiStreamingClient[Command, WorldEvent]

func (c *gameWorldClient) Ping(ctx context.Context, in *PingMsg, opts ...grpc.CallOption) (*Pong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pong)
	err := c.cc.Invoke(ctx, GameWorld_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameWorldServer is the server API for GameWorld service.
// All implementations must embed UnimplementedGameWorldServer
// for forward compatibility.
type GameWorldServer interface {
	ClientInput(grpc.BidiStreamingServer[Command, WorldEvent]) error
	Ping(context.Context, *PingMsg) (*Pong, error)
	mustEmbedUnimplementedGameWorldServer()
}

// UnimplementedGameWorldServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameWorldServer struct{}

func (UnimplementedGameWorldServer) ClientInput(grpc.BidiStreamingServer[Command, WorldEvent]) error {
	return status.Errorf(codes.Unimplemented, "method ClientInput not implemented")
}
func (UnimplementedGameWorldServer) Ping(context.Context, *PingMsg) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGameWorldServer) mustEmbedUnimplementedGameWorldServer() {}
func (UnimplementedGameWorldServer) testEmbeddedByValue()                   {}

// UnsafeGameWorldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameWorldServer will
// result in compilation errors.
type UnsafeGameWorldServer interface {
	mustEmbedUnimplementedGameWorldServer()
}

func RegisterGameWorldServer(s grpc.ServiceRegistrar, srv GameWorldServer) {
	// If the following call pancis, it indicates UnimplementedGameWorldServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameWorld_ServiceDesc, srv)
}

func _GameWorld_ClientInput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameWorldServer).ClientInput(&grpc.GenericServerStream[Command, WorldEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameWorld_ClientInputServer = grpc.BidiStreamingServer[Command, WorldEvent]

func _GameWorld_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameWorldServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameWorld_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameWorldServer).Ping(ctx, req.(*PingMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// GameWorld_ServiceDesc is the grpc.ServiceDesc for GameWorld service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameWorld_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GameWorld",
	HandlerType: (*GameWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GameWorld_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientInput",
			Handler:       _GameWorld_ClientInput_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hermeticum.proto",
}
